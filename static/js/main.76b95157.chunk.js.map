{"version":3,"sources":["global/GlobalItem.tsx","global/Global.tsx","country/CountryItem.tsx","country/Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalItem","props","type","className","style","count","Global","useState","cases","deaths","recovered","globalResult","setGlobalResult","useEffect","fetch","then","response","json","data","console","log","CountryItem","countryName","case","death","Country","country","countryResults","setCountryResults","listItems","filter","countryResult","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAgBeA,MARf,SAAoBC,GAChB,OACI,6BACI,6BAAMA,EAAMC,KAAZ,MAAoB,0BAAMC,UAAWF,EAAMG,OAAQH,EAAMI,UCiBtDC,MAzBf,WAAmB,IAAD,EAE0BC,mBAAS,CAACC,MAAO,EAAGC,OAAQ,EAAGC,UAAW,IAFpE,mBAEPC,EAFO,KAEOC,EAFP,KAed,OAXAC,qBAAU,WACNC,MAAM,gDACLC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACHC,QAAQC,IAAI,SAAWF,GACvBN,EAAgBM,QAErB,IAGC,6BACI,+DACA,kBAAC,EAAD,CAAYhB,KAAK,QAAQE,MAAM,OAAOC,MAAOM,EAAaH,QAC1D,kBAAC,EAAD,CAAYN,KAAK,SAASE,MAAM,QAAQC,MAAOM,EAAaF,SAC5D,kBAAC,EAAD,CAAYP,KAAK,YAAYE,MAAM,YAAYC,MAAOM,EAAaD,cCFhEW,MAXf,SAAqBpB,GACjB,OACI,6BACI,6BAAMA,EAAMqB,aACZ,yBAAKnB,UAAU,SAAf,UAA8B,0BAAMA,UAAU,QAAQF,EAAMsB,OAC5D,yBAAKpB,UAAU,SAAf,WAA+B,0BAAMA,UAAU,SAASF,EAAMuB,QAC9D,yBAAKrB,UAAU,SAAf,cAAkC,0BAAMA,UAAU,aAAaF,EAAMS,cCmBlEe,MAhCf,WAAoB,IAAD,EAE6BlB,mBAAS,CAAC,CAACmB,QAAS,GAAIlB,MAAO,EAAGC,OAAQ,EAAGC,UAAW,KAFrF,mBAERiB,EAFQ,KAEQC,EAFR,KAIff,qBAAU,WACNC,MAAM,sDACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAI,SAAWF,GACvBU,EAAkBV,QAE3B,IAEH,IAAMW,EAAYF,EACbG,QAAO,SAAAC,GACJ,MAAiC,WAA1BA,EAAcL,SACY,KAA1BK,EAAcL,SACY,UAA1BK,EAAcL,WACtBM,KAAI,SAACD,GAAD,OACH,6BACI,kBAAC,EAAD,CAAaT,YAAaS,EAAcL,QAASH,KAAMQ,EAAcvB,MAAOgB,MAAOO,EAActB,OAAQC,UAAWqB,EAAcrB,YAClI,gCAGZ,OACI,6BACKmB,ICfEI,MAVf,WACE,OACE,yBAAK9B,UAAU,kBACX,kBAAC,EAAD,MACA,4BACA,kBAAC,EAAD,QCEY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.76b95157.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ninterface Iprops {\r\n    type: string,\r\n    style: string\r\n    count: number\r\n}\r\n\r\nfunction GlobalItem(props: Iprops) {\r\n    return (\r\n        <div>\r\n            <div>{props.type} : <span className={props.style}>{props.count}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalItem","import React, { useEffect, useState } from 'react'\r\nimport GlobalItem from './GlobalItem'\r\n\r\nfunction Global() {\r\n\r\n    const [globalResult, setGlobalResult] = useState({cases: 0, deaths: 0, recovered: 0})\r\n\r\n    useEffect(() => {\r\n        fetch('https://coronavirus-19-api.herokuapp.com/all')\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n            console.log('Data: ' + data);\r\n            setGlobalResult(data)\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <label>Global Corona-19 Information</label>\r\n            <GlobalItem type='Cases' style='case' count={globalResult.cases}/>\r\n            <GlobalItem type='Deaths' style='death' count={globalResult.deaths}/>\r\n            <GlobalItem type='Recovered' style='recovered' count={globalResult.recovered}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Global;","import React from 'react'\r\n\r\ninterface IProps {\r\n    countryName: string,\r\n    case: number,\r\n    death: number,\r\n    recovered: number\r\n\r\n}\r\n\r\nfunction CountryItem(props: IProps) {\r\n    return (\r\n        <div>\r\n            <div>{props.countryName}</div>\r\n            <div className='small'>Cases: <span className='case'>{props.case}</span></div>\r\n            <div className='small'>Deaths: <span className='death'>{props.death}</span></div>\r\n            <div className='small'>Recovered: <span className='recovered'>{props.recovered}</span></div>\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default CountryItem\r\n","import React, { useState, useEffect } from 'react'\r\nimport CountryItem from './CountryItem'\r\n\r\nfunction Country() {\r\n\r\n    const [countryResults, setCountryResults] = useState([{country: '', cases: 0, deaths: 0, recovered: 0 }])\r\n\r\n    useEffect(() => {\r\n        fetch('https://coronavirus-19-api.herokuapp.com/countries')\r\n            .then(response => {\r\n                return response.json()\r\n            }).then(data => {\r\n                console.log(\"data: \" + data)\r\n                setCountryResults(data)\r\n            })\r\n    }, [])\r\n\r\n    const listItems = countryResults\r\n        .filter(countryResult => {\r\n            return countryResult.country !== 'Total:' \r\n                && countryResult.country !== ''\r\n                && countryResult.country !== 'World'                \r\n        }).map((countryResult) =>\r\n            <div>\r\n                <CountryItem countryName={countryResult.country} case={countryResult.cases} death={countryResult.deaths} recovered={countryResult.recovered} />\r\n                <p></p>\r\n            </div>\r\n        );\r\n    return (\r\n        <div>\r\n            {listItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React from 'react';\nimport './App.css';\nimport Global from './global/Global';\nimport Country from './country/Country';\n\nfunction App() {\n  return (\n    <div className=\"App App-header\">\n        <Global />\n        <p></p>\n        <Country />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}